#!/usr/bin/env groovy

// Library: 
//          This library includes a collection of methods used in NorthStar pipelines, methods can be called by invoking northstar.<methodname>([parameters])
//          Each method should be commented with it's expected purpose, inputs, outputs, and plugin dependencies at the top level within the method.


boolean checkForJenkinsMasterUpdates(planFilePath){

// Function to determine if a provided terraform plan file has planned changes to a Jenkins resource yaml in the spec > master tree; as changes here would require a pod restart as per the Jenkins CRD schema:
// https://jenkinsci.github.io/kubernetes-operator/docs/getting-started/latest/schema/
//
// Plugin Dependencies: 
//        pipeline-utility-steps - used for readJSON method
//
// Inputs:
//        [String planFile]: Relative file path of a terraform plan file in JSON format (eg. generated by 'terraform plan -out example.plan -json')
//
// Returns: 
//        [boolean] a boolean value where true indicates that the jenkins master pod properties are in the plan to be changed.


    boolean enhancedWarning = false;
    def triggeringChange;
    def output;

    // Call 'terraform show' on plan file with JSON output flag and capture output log as a file
    sh 'terraform show -json ' + planFilePath + ' > tfPlan.log'
    
    // Read the file as a string and split on newlines to seperate any additional contents
    def resultString = readFile(file: 'tfPlan.log');
    def results = resultString.split('\n')

    // For each output line, attempt to parse to JSON - take the first valid JSON line.
    for (def result in results){
        try{
        output = readJSON text:result;
        } catch (Exception ex){
        }
    }

    //Series of checks to see if this terraform plan item involves the jenkins > spec > master config
    if (output){
        if (output.resource_changes){
        for (def resource_change in output.resource_changes){
            if (resource_change.change){
            if (resource_change.change.actions.indexOf('update') > -1){

                //Read the before and after manifests for the master pod properties from JSON into Maps - and compare maps for any changes.

                def manifestBeforeStr = resource_change.change.before.manifest;
                def manifestAfterStr = resource_change.change.after.manifest;

                def manifestBefore;
                def manifestAfter;

                try{
                    manifestBefore = readJSON text:manifestBeforeStr;
                    manifestAfter = readJSON text:manifestAfterStr;
                } catch (Exception ex){
                    echo "Invalid JSON in resource_change manifests"
                    return false;
                }


                if (manifestBefore.kind == 'Jenkins'){
                if (manifestBefore.spec && manifestBefore.spec.master){
                    def compBefore = manifestBefore.spec.master;
                    def compAfter = manifestAfter.spec.master;

                    // If before and after manifests are not identical, 
                    if (compBefore != compAfter){
                    enhancedWarning = true;
                    triggeringChange = compAfter;
                    } 
                }
                } 
            }
            }
        }
        }
    } else {
        echo "Invalid TF Plan JSON"
    }

    return enhancedWarning;
}

//If this library is not loaded 'implicitly', uncomment the line below:
//return this