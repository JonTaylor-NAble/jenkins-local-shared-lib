#!/usr/bin/env groovy

// Function to determine if a provided terraform plan file has planned changes to a Jenkins resource yaml in the spec > master tree as changes here would require a pod restart.
// https://jenkinsci.github.io/kubernetes-operator/docs/getting-started/latest/schema/
//
// Inputs:
//        [String planFile]: File name of a terraform plan file in JSON format (eg. generated by 'terraform plan -out example.plan -json')
//        [String optionalFolderPath]: (Optional) If the terraform is being run outside the root of the workspace, this parameter provides the path to the folder containing the terraform plan file. (eg. './cicd/pipelines/terraform/')
//
// Returns: 
//         [boolean] a boolean value where true indicates that the jenkins master pod properties are in the plan to be changed.

boolean call(planFilePath){

    boolean enhancedWarning = false;
    def triggeringChange;
    def output;

    // Call 'terraform show' on plan file with JSON output flag and capture output log as a file
    sh 'terraform show -json ' + plan + ' > tfPlan.log'
    
    // Read the file as a string and split on newlines to seperate any additional contents
    def resultString = readFile(file: 'tfPlan.log');
    def results = resultString.split('\n')

    // For each output line, attempt to parse to JSON - take the first valid JSON line.
    for (def result in results){
        try{
        output = readJSON text:result;
        } catch (Exception ex){
        }
    }

    //Series of checks to see if this terraform plan item involves the jenkins > spec > master config
    if (output){
        if (output.resource_changes){
        for (def resource_change in output.resource_changes){
            if (resource_change.change){
            if (resource_change.change.actions.indexOf('update') > -1){

                //Read the before and after manifests for the master pod properties from JSON into Maps - and compare maps for any changes.

                def manifestBeforeStr = resource_change.change.before.manifest;
                def manifestAfterStr = resource_change.change.after.manifest;

                def manifestBefore = readJSON text:manifestBeforeStr;
                def manifestAfter = readJSON text:manifestAfterStr;

                if (manifestBefore.kind == 'Jenkins'){
                if (manifestBefore.spec && manifestBefore.spec.master){
                    def compBefore = manifestBefore.spec.master;
                    def compAfter = manifestAfter.spec.master;

                    // If before and after manifests are not identical, 
                    if (compBefore != compAfter){
                    enhancedWarning = true;
                    triggeringChange = compAfter;
                    echo "Master node config is changed"
                    } 
                }
                } 
            }
            }
        }
        }
    } else {
        echo "Invalid TF Plan JSON"
    }

    sh 'rm -f tfPlan.log'
    return enhancedWarning;
}